package uwu.narumi.crasher.api.exploit;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Supplier;
import uwu.narumi.crasher.api.exception.ExploitException;
import uwu.narumi.crasher.api.exploit.argument.Argument;
import uwu.narumi.crasher.api.exploit.argument.ArgumentParser;
import uwu.narumi.crasher.api.helper.LazySupplier;

public abstract class Exploit<T> {

  protected AtomicInteger index = new AtomicInteger();

  private final String name;
  private final String usage;
  private final String description;

  private LazySupplier<T> exploitSource;
  private final Argument[] arguments;

  public Exploit(Argument... arguments) {
    ExploitInfo exploitInfo = this.getClass().getAnnotation(ExploitInfo.class);
    if (exploitInfo == null) {
      throw new IllegalArgumentException("CONFUSED ANNOTATION EXCEPTION");
    }

    this.name = exploitInfo.name();
    this.description = exploitInfo.description();

    this.arguments = arguments;
    this.usage = (exploitInfo.usage().isBlank() ?
        ArgumentParser.createUsage(this) : exploitInfo.usage());
  }

  public Exploit(Supplier<T> exploitSource, Argument... arguments) {
    this(arguments);
    this.exploitSource = new LazySupplier<>(exploitSource);
  }

  public abstract void execute(Object... args) throws ExploitException;

  public final LazySupplier<T> exploitSource() {
    return exploitSource;
  }

  public String getName() {
    return name;
  }

  public String getUsage() {
    return usage;
  }

  public String getDescription() {
    return description;
  }

  public Argument[] getArguments() {
    return arguments;
  }
}
